// Code generated by go-bindata.
// sources:
// data/Dockerfile-centos.template
// data/Dockerfile-xenial.template
// data/Dockerfile.template
// data/patches/1.0.0/01_for_tests
// data/patches/1.0.0/02_for_tests
// data/patches/1.9.3-p551/01_strict_hostname_checking.patch
// data/patches/2.0.0-p0/01_readline.patch
// data/patches/2.0.0-p195/01_readline.patch
// data/patches/2.0.0-p247/01_readline.patch
// data/patches/2.0.0-p353/01_readline.patch
// data/patches/2.0.0-p451/01_readline.patch
// data/patches/2.1.0/01_readline.patch
// data/patches/2.1.1/01_readline.patch
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfileCentosTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x55\x6f\x6f\xdb\xb6\x13\x7e\xef\x4f\x71\x48\x7e\x40\x81\x5f\x4b\xa9\x6e\xda\x34\xce\x96\x17\x99\xdd\x0c\xe9\xbf\xb4\xc9\x5a\x03\x5b\x87\x96\x12\x4f\xd2\x35\xfc\x23\x90\x27\x3b\x8e\xa6\x7d\xf6\x81\x92\xe2\x3a\xed\x80\xbd\x48\xcc\x7b\xf8\x1c\x75\x47\x3e\x77\x77\x76\x79\xf1\x06\xda\x36\x59\x50\x60\xef\xba\x6e\x72\xf9\xe1\x2d\x6c\x1a\x03\x4d\xad\x24\x23\x88\xcd\x16\x21\x1b\x58\x6a\x0d\x62\x03\x65\x9e\xc7\x3f\x91\x3f\x7c\x08\x46\x5e\x23\xc8\x86\x5d\xbf\xb8\x46\x6f\x51\x0b\x85\x2b\xd4\xe0\x6b\x23\xb2\x86\xb4\x82\x4f\x13\x00\x80\x52\x53\x96\x8f\x7b\x9a\xb2\xa2\xa0\xd1\x28\x55\x66\xc6\xa5\xcd\x1b\x1f\x30\x8c\xd6\xe0\xe7\x51\x2a\x4d\x16\x47\xd0\xd5\x68\x43\xd0\xdf\x0e\xda\x48\x73\x67\xdd\x6a\xca\xee\xf9\xe6\x8d\xd7\xc0\xd2\x4f\xf6\xe1\x7c\x4c\x40\x82\x71\x1e\xc1\x38\x85\xde\xc2\x0a\x7d\x20\x67\xc1\x15\x70\xd9\x64\x9b\x04\x4e\x41\x61\x1d\xcd\xa2\x36\x50\x3a\x1e\xaf\x42\x81\xb4\x0a\x28\xd8\x07\x3c\xd9\x87\xdc\x99\x5a\x32\x65\x1a\x61\x4d\x5c\x81\x6f\xb2\x0d\x4c\x93\xa3\xe4\x39\xac\x2b\xca\x2b\xa0\x00\xeb\x4a\x72\xfc\x1d\x2f\x0e\x15\xac\x48\xc6\xab\x9c\x9c\x2e\x16\x50\x31\xd7\xe1\x38\x4d\x03\x5a\x95\x4b\x4e\x72\x67\x52\xa5\xd3\x5f\xa4\x7a\xf9\x5a\x3d\xae\x4f\x6f\xde\x4f\x5f\x7e\x9c\xbf\x7c\xfa\xf5\xf5\x9c\x8b\x67\x6f\xfc\xd9\xd1\x8b\x83\xd3\x59\x66\x9f\xac\x5e\x5d\x19\x69\x7f\x2f\x2e\x78\xba\x78\xff\x7e\x36\xbd\xfd\x3a\x2f\xd7\xe9\xf4\xf0\xd9\x34\x8d\x51\x88\x27\xc9\x41\xf2\xf8\xf3\xc1\xf3\xf0\x77\x8e\x96\x5d\xf8\x2c\x8d\x3a\x7c\x9a\xf8\xda\x40\xca\xa6\x4e\xfb\x07\x8d\x96\xa0\x01\xf8\x0f\xaf\x9e\xff\xc7\x5e\xea\x6a\xee\xa9\x3d\x33\xcd\xc8\xa6\x25\x9a\xbd\x47\xb0\x37\xe6\x17\x97\x45\xdd\x23\x42\x64\x64\x15\xf9\x93\xb4\x09\x3e\x52\x07\xd0\x3a\xe1\x95\xcb\xbf\x19\xb4\xf7\x67\x7f\x7a\xff\x48\x51\x85\x6e\x6d\xb5\x93\xea\x83\xd7\x5d\xf7\x17\x4b\x0f\xee\xe6\x76\xde\x47\x39\x69\x5b\x2f\x6d\x89\x90\xbc\x93\x9c\x57\x18\xba\x2e\xde\x62\xdb\x26\x5d\x07\xe9\xa4\x6d\xd1\xaa\xae\x9b\x2c\x2f\x2e\x5f\x2d\xce\x2f\x77\x12\x6b\xdb\x24\xbe\xeb\xc7\xe1\x99\x47\x85\x17\xce\x03\x01\x59\xf8\xd2\x27\xa2\x03\xa4\xff\x4f\xea\x78\xf0\x97\x9f\x40\x39\xe8\x97\x20\xea\xc7\xf0\x33\xfc\x8f\x22\x64\xb1\x77\x9c\x9f\xbd\x3e\xfd\xf5\xea\xe4\x81\x30\xd2\xe7\xd5\xc9\xcd\xd1\xa1\x38\x7c\x0a\xe2\xe2\x00\x44\x61\x9d\x28\x64\x60\x61\x24\x57\x20\xca\x03\x10\x65\xa9\x32\x10\xcb\xbe\x6a\x96\x78\xc3\x5e\x82\x58\x5a\x27\x1a\xdb\x04\x54\xa2\x96\x5e\x1a\x64\xf4\x03\x5a\x4b\x8f\x96\x2b\x0c\x18\x06\x40\x3b\x5b\xf6\xff\x06\xd3\x50\x08\x64\x4b\x51\x10\x6a\x25\xc8\x12\x93\xd4\x74\x8b\x3e\xd2\xc7\x23\x57\xd2\x93\x8c\xaa\x14\xcb\xda\x91\x65\xf4\x42\xfa\x28\x50\xb1\x5c\x7b\x62\x14\x81\x3d\xd9\x32\x7a\x28\xcc\xb5\xf4\x92\xc9\x59\x21\x8b\xc8\x0c\x2c\x19\x0d\x5a\x06\xb1\x24\x53\x6b\xca\x89\x45\xd1\xd8\xbc\xe7\xec\xf0\x7b\xef\xda\x63\x1e\xeb\x62\x77\x23\xdc\x65\x92\x5f\xa3\x12\x19\xf1\x10\xeb\x50\x2d\x20\x02\xab\x13\x0a\x6e\x76\x34\x9b\x1d\x4f\x67\xb3\x19\x80\x28\xde\x9d\xcf\x1f\x40\x92\xe6\xce\x16\x54\x36\x1e\xfb\xba\x15\xa2\xf6\x58\xd0\xcd\x20\x20\xed\x72\xa9\x47\x1c\x6d\x4c\x4f\x84\x4a\x7a\x54\x23\xa6\x28\xf4\xe0\x28\x44\xa1\x5c\x7e\x9f\x1d\x35\x25\x3c\x6a\xc9\xb4\xc2\xc9\x3e\x5c\x21\x9a\x00\xec\xc0\x59\xbd\x01\x59\x14\x98\x33\x04\x67\x10\xa6\xc9\x0c\x02\x7a\xc2\x10\xbb\x01\x61\x78\x04\x59\xc3\xc0\x15\xc6\x92\xcf\xc8\xa2\x1a\x3a\x5e\x60\xac\x8f\x27\xfb\x93\xfd\xd8\x64\x20\x4a\xa3\x87\xc5\xd7\xa3\x6d\xa3\x5c\xbc\xb8\xfa\x6d\x71\x7e\x79\xd2\x6b\xb1\xa8\x4d\xcf\xe6\xd8\x14\xbc\xb4\xfd\x91\xbd\x0b\x57\x68\x87\xd5\xe8\xf8\x08\xd6\x32\x40\xe6\xdd\x35\xda\x04\xae\x6a\x4d\xcc\x64\x4b\xa0\xd8\x8a\x80\x2c\xbb\x78\xce\xda\x41\xc0\xa8\x20\xee\x43\x33\xd2\xaa\x00\x6b\xe7\xaf\x03\x14\x64\xf1\x78\xb2\x13\x53\xdb\x26\x6f\x1b\x33\x7f\xf7\x61\x94\xff\xee\xd7\x7e\x0c\xf3\x5b\x11\x0d\xb5\x52\x9b\xb1\x97\x8a\x00\x8a\xfc\x9d\xc1\x7d\x13\x19\x0d\x3b\x74\xc0\xd1\x92\xb1\x2e\x4f\x7d\x5e\x75\xdd\x1d\xb4\x82\xef\x0b\x71\xdc\x69\xdb\xe4\x9c\x71\x90\x4f\xd7\x0d\x64\x75\x6f\x54\x7c\xba\x03\xef\xcd\x8c\x2d\xba\x33\x3c\xb6\xd8\xbf\x4d\x11\xa1\xbe\x1f\x24\x5b\xfc\xfe\x44\xd9\xfd\xde\xce\x68\xd9\xc2\x3f\xcc\x18\x31\xb4\xa8\x74\xe7\xa6\x6a\x48\xdb\x36\x39\x23\x8d\x6f\xa5\xc1\x6d\xb2\x4d\xf0\x93\x7f\x02\x00\x00\xff\xff\xb8\xfb\xaf\xce\x73\x07\x00\x00")

func dataDockerfileCentosTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileCentosTemplate,
		"data/Dockerfile-centos.template",
	)
}

func dataDockerfileCentosTemplate() (*asset, error) {
	bytes, err := dataDockerfileCentosTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-centos.template", size: 1907, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileXenialTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\xdd\x6e\xe4\x36\x0f\xbd\xf7\x53\x10\xc9\x07\x2c\xf0\x21\x9c\x69\xb0\x6d\x90\x49\x9b\x8b\x20\xd3\x14\x41\xdb\x24\x98\x34\x9d\x8b\x6e\x81\x95\x2d\xda\xc3\x46\x96\x0c\x89\xce\x9f\xeb\x77\x2f\x24\xdb\xb3\x4e\xb7\x37\x06\x79\xf8\x63\x4a\x3a\x3c\x57\x9b\xdb\x5f\xa1\xeb\x16\x6b\x0e\xe2\x5d\xdf\x67\x9b\x87\x1b\x50\x8d\x60\x45\x02\x6d\xa3\x95\xd0\x3b\x88\x6d\x10\x65\x0c\xe0\x2b\xe4\x2d\x1b\x8d\x14\x02\x59\x61\x65\xe0\x53\x06\x00\x60\x38\x2f\x4e\x50\xd3\x53\xb4\xca\x92\x27\xb3\xd2\x79\x3d\xd9\xb6\x68\x7d\xa0\xf0\x5d\xf2\xf7\x65\x9e\x94\x36\x6c\x69\xca\x0a\xc1\x4c\xe6\xab\xaa\x07\xfb\xcd\x70\x7e\x5c\xcd\xea\x8a\xd6\x1b\xf0\x6d\xfe\x9a\x3e\x31\x90\xc6\xfd\xe3\xa0\xa2\xfa\xe0\x08\x0e\xc6\x79\xa3\x59\x36\x09\x41\xcc\xd9\x6a\xf6\xe7\xcb\x36\xf8\x65\xce\x76\x00\xad\x43\xaf\x5d\xf1\xc5\xe1\x83\x3f\xb3\xd4\x2b\xfd\x22\x5e\x91\x7b\xb6\xc6\x29\xfd\xe0\x4d\xdf\xff\x2d\xca\x83\x7b\x79\xbb\x84\xa5\xd4\x4d\xd6\x75\x5e\xd9\x8a\x60\x71\xa7\xa4\xd8\x51\xe8\xfb\x8b\xf5\x3a\x16\xf5\x3d\x2c\xb3\xae\x23\xab\xfb\x3e\xdb\xde\x6e\x7e\x5e\x5f\x6f\x52\xc9\x32\xcd\xdb\x75\x8b\x4d\x9b\xbf\xfe\x4e\x3e\xb0\xb3\xe3\xf5\x97\xce\x03\x03\x5b\xf8\x1c\xc7\x5b\x9a\x00\xcb\xff\x2f\x9a\xd8\xf8\xf3\xf7\xa0\x1d\x24\x13\xb0\xf9\x06\x7e\x80\xff\x71\x84\xec\xf0\x48\x97\x57\xbf\x5c\xfc\x74\x7f\xfe\x01\x6b\xe5\x8b\xdd\xf9\xcb\xe9\x09\x9e\x7c\x0b\x78\xfb\x11\xb0\xb4\x0e\x4b\x15\x04\x6b\x25\x3b\xc0\xea\x23\x60\x55\xe9\x1c\x70\x9b\x5e\x73\x4b\x2f\xe2\x15\xe0\xd6\x3a\x6c\x6d\x1b\x48\x63\xa3\xbc\xaa\x49\xc8\x0f\x68\xa3\x3c\x59\xd9\x51\xa0\x30\x00\xc6\xd9\x2a\x7d\x06\xb7\xe6\x10\xd8\x56\x58\x32\x19\x8d\x6c\x39\x72\x82\xdf\xc8\xc7\xf4\xb1\xe5\x93\xf2\xac\x72\x43\x80\xdb\xc6\xb1\x15\xf2\xa8\x3c\xc7\x79\xb6\xcf\x9e\x85\x30\x88\x67\x5b\xc5\x0a\x4d\x85\x51\x5e\x09\x3b\x8b\xaa\x8c\x99\x41\x94\x50\x4d\x56\x00\xb7\x5c\x37\x86\x0b\x16\x2c\x5b\x5b\xa4\x9c\x59\x7e\xaa\x6e\x3c\x15\x4a\x48\xcf\x03\x61\x3a\x49\xf1\x48\x1a\x73\x96\x61\xd6\xc2\xd5\x8d\x12\xc0\x20\xfa\x9c\x83\x5b\x9d\xae\x56\x67\xc7\xab\xd5\x0a\x00\xcb\xbb\xeb\xcb\x0f\xb0\x58\x16\xce\x96\x5c\xb5\x9e\x12\xeb\x10\x1b\x4f\x25\xbf\x0c\x0c\x32\xae\x18\xc9\x8f\x48\x36\x1e\x0f\xc3\x4e\x79\xd2\x23\xa6\x39\x24\x70\x64\x22\x6a\x57\xbc\xcf\x8e\x9c\x42\x4f\x46\x09\x3f\x51\x76\x08\xf7\x44\x75\x00\x71\xe0\xac\x79\x05\x55\x96\x54\x08\x04\x57\x13\x1c\x2f\x56\x10\xc8\x33\x05\xd8\xb4\x39\x53\x38\x82\xbc\x15\x90\x1d\x41\xe1\xea\x9c\x2d\x69\xa8\xd5\x23\x41\x10\x6a\xce\xb2\xc3\xec\x30\xae\x08\x44\x6a\x24\x18\xff\x3a\xdd\x2f\xf0\xfa\xc7\xfb\xdf\xd6\xd7\x9b\xf3\xc4\xc5\xb2\xa9\x53\xb6\xec\x94\x80\x57\x36\xb5\x4c\x25\xb2\x23\x3b\x58\x63\xe1\x11\x3c\xab\x00\xb9\x77\x8f\x64\x17\x70\xdf\x18\x16\x61\x5b\x01\x47\xb9\x00\xb6\xe2\x62\x9f\x67\x07\x81\x22\x83\x24\x8d\x56\x2b\xab\x03\x3c\x3b\xff\x18\xa0\x64\x4b\x67\xd9\x6c\xa6\xae\x5b\xdc\xb4\xf5\xe5\xdd\xc3\x48\xff\xf9\xdf\xbe\x1e\xf3\xcb\x12\x0d\xbb\xd2\xd4\xa3\x12\x60\x00\xcd\x7e\x72\x04\x34\xe5\x93\x63\x07\x85\x18\x3d\x15\xf7\xf2\xc2\x17\xbb\xbe\x9f\xa0\x27\xf8\xf7\x22\x8e\x91\xae\x5b\x5c\x0b\x0d\xf4\xe9\xfb\x21\x59\xcf\x34\xee\xd3\x0c\x9a\xc4\x6e\x8e\xed\x55\x6f\x0e\xfe\x87\xfc\x0d\x81\x77\x0a\x38\x0f\x4c\x52\x38\xc7\xf6\x9a\xb8\x07\xbf\x12\x47\x1c\xd4\x69\x39\xbb\xa4\x06\x96\x5d\xb7\xb8\x62\x43\x37\xaa\xa6\xfd\x39\xdb\xe0\xb3\x7f\x02\x00\x00\xff\xff\x04\x2f\xf6\xea\x0b\x06\x00\x00")

func dataDockerfileXenialTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileXenialTemplate,
		"data/Dockerfile-xenial.template",
	)
}

func dataDockerfileXenialTemplate() (*asset, error) {
	bytes, err := dataDockerfileXenialTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-xenial.template", size: 1547, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x51\x4f\xe3\x46\x10\x7e\xcf\xaf\x18\x41\xa5\x93\x2a\xc6\x29\xa2\x45\x84\x96\x07\x44\x4a\x85\xda\x02\x0a\xa5\x79\xe8\x55\xba\xb5\x77\xec\x4c\x59\xef\x5a\xbb\x63\x20\xb8\xfe\xef\xd5\xae\xe3\x9c\xe9\xdd\x4b\x34\xf3\xed\x37\x93\x59\xef\x37\xdf\xf5\xea\xee\x77\xe8\xba\x6c\xc9\x41\xbc\xeb\xfb\xd9\xea\xf1\x16\x54\x23\x58\x91\x40\xdb\x68\x25\xf4\x0e\x62\x1b\x44\x19\x03\xb8\x05\xdf\xe6\xdb\xe3\x6c\x91\x9d\x40\xde\xb2\xd1\x48\x21\x90\x15\x56\x06\x3e\xce\x00\x00\x0c\xe7\xc5\x29\x6a\x7a\x8e\x51\x59\xf2\x18\x56\x3a\xaf\xc7\xd8\x16\xad\x0f\x14\x7e\x48\xf9\xbe\xcc\x93\xd2\x86\x2d\x8d\xac\x10\xcc\x18\x6e\x55\x3d\xc4\x6f\x86\xf3\xe3\x6a\x52\x57\xb4\xde\xa4\x51\xff\x3a\x98\xb7\xc1\xcf\x73\xb6\xf3\x8a\xea\x83\x23\x38\xd8\x0d\x1d\xc3\xb2\x49\x08\x62\xce\x56\xb3\xbf\x18\xa9\x03\x68\x1d\x7a\xed\x8a\xcf\x09\x1f\xfc\x9d\x7a\xc6\xe6\xe9\x33\xb9\x17\x6b\x9c\xd2\x8f\xde\xf4\xfd\xbf\xa2\x3c\xb8\xd7\xb7\x2b\x98\x4b\xdd\xcc\xba\xce\x2b\x5b\x11\x64\xf7\x4a\x8a\x0d\x85\xbe\xbf\x5c\x2e\x63\x51\xdf\xc3\x7c\xd6\x75\x64\x75\xdf\xcf\xd6\x77\xab\x5f\x97\x37\xab\x54\x32\x8f\x9f\x10\xbb\x2e\x5b\xb5\xf9\xf6\x4f\xf2\x81\x9d\xdd\x3d\x41\xe9\x3c\x30\xb0\x85\x4f\xe9\x22\x26\xc0\xfc\xdb\xac\x89\x8d\x3f\xfd\x08\xda\x41\x0a\x01\x9b\xef\xe0\x27\xf8\x86\x23\x64\x87\x87\xba\xba\xfe\xed\xf2\x97\x87\x8b\x0f\x58\x2b\x5f\x6c\x2e\x5e\xcf\x4e\xf1\xf4\x7b\xc0\xbb\x13\xc0\xd2\x3a\x2c\x55\x10\xac\x95\x6c\x00\xab\x13\xc0\xaa\xd2\x39\xe0\x3a\xbd\xe8\x9a\x5e\xc5\x2b\xc0\xb5\x75\xd8\xda\x36\x90\xc6\x46\x79\x55\x93\x90\x1f\xd0\x46\x79\xb2\xb2\xa1\x40\x61\x00\x8c\xb3\x55\xfa\x19\xd2\x9a\x43\x60\x5b\x61\xc9\x64\x34\xb2\xe5\xa8\x06\x7e\x23\x1f\xe9\xbb\x96\xcf\xca\xb3\xca\x0d\x01\xae\x1b\xc7\x56\xc8\xa3\xf2\x1c\xe7\x59\xbf\x78\x16\xc2\x20\x9e\x6d\x15\x2b\x34\x15\x46\x79\x25\xec\x2c\xaa\x32\x32\x83\x28\xa1\x9a\xac\x00\xae\xb9\x6e\x0c\x17\x2c\x58\xb6\xb6\x48\x9c\x09\x3f\x55\x37\x9e\x0a\x25\xa4\xa7\x07\x61\xbc\x49\xf1\x44\x1a\x73\x96\x61\xd6\xc2\xd5\x8d\x12\xc0\x20\xfa\x82\x83\x5b\x9c\x2d\x16\xe7\xc7\x8b\xc5\x02\x00\xcb\xfb\x9b\xab\x0f\x90\xcd\x0b\x67\x4b\xae\x5a\x4f\x49\x6f\x88\x8d\xa7\x92\x5f\x07\x01\x19\x57\xec\x64\x8f\x48\x36\x5e\x0f\xc3\x46\x79\xd2\x3b\x4c\x73\x48\xe0\x4e\x88\xa8\x5d\xf1\x9e\x1d\x35\x85\x9e\x8c\x12\x7e\xa6\xd9\x21\x3c\x10\xd5\x01\xc4\x81\xb3\x66\x0b\xaa\x2c\xa9\x10\x08\xae\x26\x38\xce\x16\x10\xc8\x33\x05\x58\xb5\x39\x53\x38\x82\xbc\x15\x90\x0d\x41\xe1\xea\x9c\x2d\x69\xa8\xd5\x13\x41\x10\x6a\xce\x67\x87\xb3\xc3\xb8\x1c\x10\xa5\x91\x60\xfc\xe7\x6c\xbf\xc4\xcb\x9f\x1f\xfe\x58\xde\xac\x2e\x92\x16\xcb\xa6\x4e\x6c\xd9\x28\x01\xaf\x6c\x6a\x99\x4a\x64\x43\x76\x88\x76\x85\x47\xf0\xa2\x02\xe4\xde\x3d\x91\xcd\xe0\xa1\x31\x2c\xc2\xb6\x02\x8e\x96\x01\x6c\xc5\xc5\x3e\x2f\x0e\x02\x45\x05\x49\x1a\xad\x56\x56\x07\x78\x71\xfe\x29\x40\xc9\x96\xce\x67\x93\x99\xba\x2e\xbb\x6d\xeb\xab\xfb\xc7\x9d\xfc\xa7\xff\xf6\xe5\x98\x9f\x97\x68\xd8\x95\xa6\xde\x79\x00\x06\xd0\xec\xc7\x44\x40\x53\x3e\x26\x36\xf9\xd5\x98\xa9\xb8\x97\x97\xbe\xd8\xf4\xfd\x08\x3d\xc3\xff\x17\x71\x77\xd2\x75\xd9\x8d\xd0\x20\x9f\xbe\x1f\xc8\x7a\xe2\x6e\x1f\x27\xd0\x68\x73\x53\x6c\xef\x77\x53\xf0\x2b\xc6\x37\x1c\xbc\xf3\xbe\xe9\xc1\x68\x82\x53\x6c\xef\x86\x7b\xf0\x0b\x5b\xc4\xc1\x9d\xe6\x93\x8f\xd4\xc0\xbc\xeb\xb2\x6b\x36\x74\xab\x6a\xda\xdf\xb3\x0d\x7e\xf6\x5f\x00\x00\x00\xff\xff\x5a\xb5\x63\x7b\x0f\x06\x00\x00")

func dataDockerfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileTemplate,
		"data/Dockerfile.template",
	)
}

func dataDockerfileTemplate() (*asset, error) {
	bytes, err := dataDockerfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile.template", size: 1551, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10001_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\x2c\x02\x04\x00\x00\xff\xff\xaa\x8c\xff\x76\x03\x00\x00\x00")

func dataPatches10001_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10001_for_tests,
		"data/patches/1.0.0/01_for_tests",
	)
}

func dataPatches10001_for_tests() (*asset, error) {
	bytes, err := dataPatches10001_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/01_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10002_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\xac\x02\x04\x00\x00\xff\xff\x98\x04\x24\x78\x03\x00\x00\x00")

func dataPatches10002_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10002_for_tests,
		"data/patches/1.0.0/02_for_tests",
	)
}

func dataPatches10002_for_tests() (*asset, error) {
	bytes, err := dataPatches10002_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/02_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches193P55101_strict_hostname_checkingPatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xfd\x6e\xdb\x38\x12\xff\xdf\x4f\x31\x67\x03\x8d\x9d\xc8\xf2\x47\xec\x7c\x18\x9b\xdd\xfa\x9c\x64\xb7\x40\xe2\x14\x75\x8a\xbd\x43\x92\x33\x28\x69\x64\x73\x2b\x91\x5e\x92\x8e\x9d\x6c\x7b\xef\xb2\xcf\xb2\x2f\x76\xa0\xbe\xfd\xed\xa6\x69\x5a\x2c\x2e\x28\xe0\x8a\x1a\x0d\x67\x7e\xf3\xe3\x70\x86\xd2\xb9\xe0\x3e\x1c\xdb\xf5\xfd\x43\x72\x74\x58\xb7\xf6\xab\x56\xb5\x51\xb3\x1a\xb5\x46\xa3\xda\xac\x37\x8f\x0e\x8e\xeb\x2e\x56\xab\xb5\xa3\x23\xbb\x8e\x4d\xb8\xe4\x0c\x7a\x38\x82\xda\x21\x54\xab\xad\xe0\x1f\xd4\xab\xd5\x5a\x4e\xab\x69\xc1\x35\x67\x0f\xd0\x16\x36\x45\x41\xe1\x07\x8b\x48\x7b\xec\xe1\xeb\x81\x4f\xa8\x67\xda\xdc\xff\x31\x77\x4a\x14\xb6\xa0\x37\x66\x06\xd4\x8f\xe1\x92\x08\xa8\x57\x6b\x4d\xa8\x1d\xb6\xea\x47\xad\x46\x03\xca\xd5\xc3\x6a\x35\xd7\x1b\x5b\xbf\xa1\xad\x5a\x70\xf3\xb6\x7d\xdd\xf9\xe5\x0e\x7a\x4a\x50\x5b\xa1\x80\x21\x97\x8a\x11\x1f\xe1\x1e\x05\x75\xa9\x4d\x14\xe5\x0c\x5c\xee\x79\x7c\x42\xd9\x00\xde\x9d\x77\xe0\xa0\x56\x6f\x9a\xb9\xdc\xf5\x90\xb0\x0f\x12\x14\x87\xd7\x8c\x0c\x29\xb8\x5c\x80\x1a\x22\x28\x94\x4a\x02\x61\x0e\x50\x46\x15\x25\x1e\x38\xdc\x1e\xfb\xc8\x54\xa0\xcc\xcc\x95\xcb\xe5\x1c\xe0\x54\x55\xf8\x08\x99\x94\x5e\xc5\xa3\x56\xf2\x7f\x29\xbd\x32\x65\x0a\x05\x23\x9e\x29\x2c\xf8\x08\x70\x50\x87\xbd\x25\x7f\x5a\x8b\x9e\x2b\x79\x54\x5f\xf4\xa5\x0c\x1e\x03\xf8\x08\xb5\x66\x75\xe9\x83\x1b\xff\x72\x50\x07\x97\x7a\x28\xc1\x1e\x12\x36\x40\xc7\x80\x7a\xf5\x08\x28\x93\x28\xb4\x0b\xb2\xb8\x57\x32\xa0\x01\x0e\x7a\x18\x5e\x97\x4b\xb9\x9c\x43\x5d\x17\xca\xe5\x01\x55\x40\x2a\x6b\xdc\xd3\xe6\x59\x1b\x04\x72\x94\x39\x38\x05\xd7\xad\x39\x0d\x74\x4d\xd3\x26\x6e\xd5\x3a\x26\x50\xab\x56\x0f\x1a\x0d\x8d\xe0\xb6\x00\xe6\xf6\xf6\xf6\xb6\x96\x7d\xfd\x1a\xca\xb5\xc6\xbe\x71\x04\x7b\xfa\xe7\x10\x5e\xbf\x06\x07\xdd\x90\x0c\x0f\x7d\x5b\xbb\x1f\x90\x02\xfb\xd4\x41\xa6\xa8\x7a\x28\xea\x41\x23\xe1\x4d\x29\x07\xe9\x9f\x4d\x24\x82\x24\xcc\x54\x64\x90\x1d\x9f\x0c\x91\x41\x1d\x0a\xe0\x74\x7b\x5d\x4d\x36\xca\xe0\x67\x64\x28\x88\x17\x5c\x16\xdf\x9d\x77\x9a\xf5\xa3\xea\x8c\x32\x00\x39\xe4\x63\xcf\xe9\xc7\xc6\x70\xdf\xe7\xac\x1f\x90\xf5\x04\x5c\xe2\x49\xcc\x95\xb3\xe2\x02\x07\x70\x02\xef\x70\x80\xd3\x91\x89\xd2\x26\x23\x2c\x6a\x63\xee\x89\x37\xc6\x92\x39\x90\x63\xab\x58\xb9\xbd\xbd\xdd\xad\x18\x90\xbf\xf9\x8f\x79\xb7\x97\x2f\xcd\x6b\x50\x63\xc1\x40\x89\x31\x02\x75\xa1\x72\xdb\x2e\xfc\x21\x70\xf0\xe9\xf6\xb1\x42\xe1\xe4\xbf\x89\xd3\xb9\xbd\x35\x4f\x45\xe6\xc6\xb2\xc5\xf8\x3f\x06\xa4\xc6\x2c\x80\x73\x08\x05\xa0\x6f\xdb\x8e\x23\x50\xca\x67\x83\x67\x46\xbc\x10\xad\x6a\x09\x3f\x9f\x75\xcf\xde\xb5\x2f\xfa\xdd\xf6\xe5\x59\x7f\x24\x28\x53\xc5\x92\x9e\x73\xda\xac\x1e\xdf\xef\x57\xee\xf7\xfb\xc4\x53\xa6\x1d\xb2\xa3\x79\x1c\xb0\xa3\x79\xf4\x45\xec\xa0\xee\x6a\x73\x53\x33\xf5\xc3\xa6\x0c\x73\x95\xa9\x78\x9f\x98\x48\xec\xe1\x1f\x1f\x39\x75\x0c\x08\x90\xfb\x98\xf5\x89\xba\xc0\xa9\x03\x27\x27\x90\xef\x74\xf3\x9b\xc9\xf0\xdd\x10\x61\x91\x04\xc8\x9c\xf4\xf2\x53\x2e\x33\x1a\x04\xe1\xe0\xc8\xa8\xd5\x60\xaf\x76\x70\x60\x1c\x3c\x3d\x0c\xc9\x24\x3e\x77\xc6\x1e\xf6\xdd\x31\xb3\x83\x74\xdf\x5a\xa3\x2a\x17\xfa\x98\x99\x70\x39\xb3\x4b\x50\x80\x16\xe3\x0e\xb7\x5b\x31\x2a\x85\x60\xf7\xd0\xcc\x35\xe0\x4d\xbb\xa9\xf7\x1c\x36\x00\x2a\xc1\xa3\x3e\x55\xe8\xe8\xad\x44\x6f\x20\x12\x15\x70\x17\xda\xbd\xce\x9b\x37\x3a\x03\x0b\xa2\xb7\x26\x19\xab\x89\x60\x0d\x28\x0d\x63\xe6\xe9\x15\xa2\x97\x12\x91\x36\xa5\x7d\xce\xbc\x87\x9f\xd6\x89\xc6\x56\xce\xca\xa7\x36\xf6\x10\x93\x5d\xce\x00\x89\x21\x24\x07\x66\xc3\xac\xa5\x42\x97\x44\xd9\xc3\xc8\x7a\x9d\xe5\xca\x7a\x6f\x60\x92\x2a\x7a\x8f\x66\x2c\x26\x09\xeb\x8f\x88\x50\x12\x4e\x02\x03\x1d\x3e\x61\x5a\xd8\x94\x23\x8f\xaa\x62\xde\xcc\x97\xb2\x13\x5f\x5f\x9d\x5e\xb5\x40\x0d\xa9\x04\x0b\x87\xe4\x9e\x72\x11\x2d\x12\x18\x09\x6e\x11\xcb\x7b\x00\x0b\xc1\xe7\x02\x41\x06\xfb\xf5\x9c\x9b\x92\x30\x4d\xfe\x64\x0b\xd7\x8b\x2c\x36\xc1\x94\xf4\x11\xe1\x07\xa8\x67\x67\xdc\xca\x0b\xad\x2e\x71\x23\x01\x6f\x83\x2f\xcb\x01\xdc\x37\x40\x8e\x2d\xaa\xd0\x87\xba\x99\x0a\xbf\x71\x83\xb0\x4f\xa8\xe7\xd8\x44\x38\x69\xc8\xb5\x5d\xfa\x8e\x8e\x51\x66\x94\x87\xf2\x1e\xba\xaa\xec\x73\xa9\x52\x4d\x1e\xb1\xd0\xd3\xa9\x4b\xdf\x1f\x09\x94\xc8\x34\xaf\x42\xee\xba\x14\x85\x11\xdc\xb1\x3d\x8a\x4c\x41\xef\x97\xab\xf7\x17\xa7\xd0\xbd\xba\x06\x9b\xfb\x23\x22\x30\xd5\x44\x06\x84\x32\xa9\x80\xb0\x07\x15\x40\x64\x8d\xd5\xec\xac\xd1\x64\x91\x31\x02\x5d\x14\xc8\xec\x8c\x8a\x74\x56\x28\xa2\x39\x30\x0d\xd8\x35\x71\x4a\xfc\x91\x87\xba\x56\x83\x49\x10\x5a\x5f\xc7\x00\x5c\xce\x67\xee\x59\xe3\x8c\x57\x8c\x2b\xb0\x88\x30\xe7\x85\xb8\x80\xcc\x65\xc9\xdc\xb0\x40\xb2\x44\x88\x68\x92\x19\xfa\xac\xe8\xd5\x32\xd1\xbb\x5e\x0a\x28\x51\x0a\xfd\x91\xd2\x4b\x3a\xf4\x90\x2c\x8d\x07\x50\x96\x6a\x9a\x0c\xa9\x3d\x5c\x45\x05\x1d\x21\x41\x25\x4a\x20\x31\xf2\x6a\x88\xba\xe2\x24\x41\xb8\x33\x24\x98\x8b\x50\x04\xbe\xc3\x03\x20\x43\x6b\x34\x9c\x69\x34\x18\xaa\xf5\xe8\x45\x99\x2e\x36\xab\x98\xc5\x6e\x48\x5d\x65\x64\xf1\xd5\x03\x99\xc5\x90\xde\xf9\x8d\x53\x16\xac\x94\x39\xf8\x93\xf1\xf0\x11\x9d\x96\xf7\xd6\xa5\xe5\x74\xb7\x59\xc8\xc5\x89\x85\x0e\xf7\x09\x65\x7a\x5b\x1d\x71\x86\x2c\xb2\x30\xb9\x5c\x92\x9d\x33\x99\x2a\x95\x8b\x97\xf7\x6e\xde\x80\x72\x2d\xe3\xd5\x0c\x4a\xd4\x85\x0c\xb7\x7e\xd4\x49\x66\x3e\x31\xa5\x2a\xb5\xf3\xf3\xd6\xcd\x69\x38\x39\x81\xda\x67\xf1\x71\xff\xb9\xf8\x98\x25\x23\x0a\x5c\x93\x97\xd0\xb7\xd0\x71\xd0\x81\x09\xd5\x09\x02\x08\x83\x76\x39\x22\x66\x46\xcd\xfb\x72\x92\x26\x08\x83\xa8\xd6\xd6\x2e\x10\x8f\x3e\xa2\x13\x21\x01\x41\x4e\x5d\x85\xed\x3c\x5a\xa6\x54\x44\xa8\xbe\x9e\xf8\xa7\x62\x7e\xca\xca\xe5\x7c\x09\x5e\xbd\x9a\x83\xf9\x1f\x27\x90\xdf\xcd\xa7\x30\x06\xf8\xde\x54\xef\x4c\x0f\xd9\x40\x0d\x61\x2f\x1a\xa9\x25\x23\x3f\x2c\xce\x14\xdd\x79\xf5\x2a\xd6\xb2\xd6\x96\x78\x8a\xd2\xba\x07\x90\x39\x33\xe2\xb5\xbb\x6d\x79\x1f\x07\x22\xb7\x17\x96\x2d\xb6\x47\xa4\x84\x5e\xef\xa2\xc7\xed\x0f\xa8\x92\xda\x92\xd9\xde\xd8\x41\xf8\xe7\xd8\x75\x51\x97\x18\xf3\x37\x42\xf1\x73\x2e\x26\x44\x38\x28\xe6\x6f\x77\x39\xb3\x3c\x6e\x7f\xc8\x25\x51\x2c\xa4\xf1\x7c\x8b\xc2\xe5\xc2\x5f\xd1\x27\x13\x57\xb3\x83\x30\x6d\x14\xd8\x9c\xb1\x88\xae\x9a\x2f\x52\x11\xcb\xa3\x72\x88\x4e\xa2\x2d\x4b\x5a\x2a\xc1\x47\x35\xe4\x0e\x5c\xbe\xef\x5d\xeb\x8d\xde\x26\x9e\x87\x4e\xa4\x53\x5f\xe8\x6d\xa8\x10\x69\xd5\x44\x46\x26\xc7\x01\x47\x89\x9a\xcd\x80\x89\x71\x9a\x75\x20\xd0\xe7\x0a\x61\x84\xba\xbd\x27\xba\xb8\x40\x16\x99\x8d\x8e\x19\x7b\xaf\x93\xc8\x48\xe7\xa4\xd4\xec\xbe\x3d\x44\xfb\x43\x71\x49\x6b\x17\xa5\xc5\xab\x11\xb2\x5e\xef\xa2\xd5\xea\xf5\x2e\xcc\x75\xe5\xa7\x9e\xbb\xbf\xa6\x51\x14\x84\x4a\xd4\xa0\x9d\x09\xc1\x85\x01\xf9\xc4\x83\xdb\x7c\xe1\x8f\xf8\xe2\xd3\x6d\x1e\x1c\x8e\x32\x93\xc7\xc3\x72\x51\xdc\x6b\x84\xd2\x89\xf3\xb3\xbd\xf8\xca\x43\x02\x6b\xe5\xad\xa8\xff\xb6\x0e\x9a\xfb\xc7\xc7\xae\x69\x36\xea\x8d\x6a\xed\xa8\x9e\xed\xbf\x57\x3e\xaa\x1b\xee\x95\x37\x75\xf9\xde\xa8\x1f\x18\x07\xb0\xa7\x7f\x6a\xcd\x83\xb8\x7c\x0f\xa4\xd6\x15\xde\x00\x69\xcd\xae\x7f\x74\xbc\xe7\x1f\x9c\x6d\x44\x88\x94\x28\x54\x1f\x7f\x1f\x13\xaf\xa8\xdb\x10\x03\x96\xc6\x2c\xa9\xe0\xf3\x93\xc9\x24\x5b\x62\xe4\x0d\xc8\xcf\x14\x2d\xf9\x52\x69\x89\xea\x20\x53\x19\x5b\xa8\x96\x63\x2b\xcc\x07\xdb\x4c\x12\xe4\x83\x65\x4e\xa6\x79\xe0\x73\x2c\x49\xb6\xc6\xbc\xcb\xb9\x9e\x73\xba\xbb\xdc\x9b\x35\x40\x2d\xe8\xd0\x3f\x5f\xae\xe4\x19\x0c\x59\xa1\x62\x2b\x3c\x88\x65\xef\x5a\xb6\xa3\xd5\x10\xfd\xfb\x74\x4d\x7a\x2f\xfa\xdd\xf9\xd0\xb0\x8e\xad\x75\x08\x3f\x45\xd7\x6e\x7a\xf5\x74\xb0\xe6\xed\x63\xf3\x4a\x13\xce\x15\xa0\xc3\x7d\x1f\x99\x92\x61\x3b\xa1\x3b\x11\x94\x2a\xc8\xe4\x53\x1b\xc5\x48\xd7\x0d\xae\xe0\x3e\x0c\x95\x1a\xb5\x2a\x15\xc5\xb9\x27\x4d\x8a\xca\x35\xb9\x18\x54\x86\xca\xf7\x2a\xc2\xb5\x75\xd9\x52\x18\x91\x01\x96\xeb\x87\x33\x5c\x5e\x9a\x6b\x13\x53\xfb\x92\x44\x85\x71\x61\xa1\x33\x8b\x1b\xe3\xa0\x65\xa1\x92\x27\x82\x6b\xbb\xd6\x42\x2c\x95\x37\x4d\x3f\xee\xfb\xe6\x9b\x97\x6c\x65\x1e\x77\x40\xab\x5a\xa9\x58\x1f\x95\x30\x0a\x37\x45\x74\xc0\x7a\x88\xed\x62\x83\x6c\x2f\x9f\x29\x73\xc2\xaa\x5c\xc2\x58\x6a\x19\xb2\xb5\x97\x06\x10\xa9\xb7\xfc\x70\xdf\xd2\x33\xdd\x9c\x76\x7b\xe5\x4e\xbb\x77\x76\x17\xd5\xf8\x89\x8b\xbf\xfe\xfa\xab\x79\x16\x25\x94\x0e\xf7\xf3\x51\xaf\x65\x21\x78\x7c\x82\xa2\xac\x27\x0b\x8e\x1b\x16\x12\x1e\xb8\x3c\xf1\x2c\x9d\x1b\x46\x63\x31\xe2\x12\xe5\x6a\xe6\x6d\xbd\x17\xc6\xdb\xb4\x2d\x50\x8f\x6b\x99\xa0\x1e\xd2\x21\x2f\xee\x9c\x76\x7b\xad\x99\x64\xb8\x53\x32\x60\x67\xce\xca\x9d\x35\x2b\xe0\x59\xed\x48\x30\xbc\xba\xfc\xa6\x76\xcc\xe3\x31\x13\x5f\x6d\x5b\x29\x8e\x59\xcd\x84\x67\xea\x48\x0b\x81\x55\xcf\xd0\x93\x86\x8a\xbe\xa8\x2b\xdd\x36\x7b\x3e\x11\x60\x1d\xd6\xdd\x8d\x64\x2b\x40\xdd\x84\x67\x3a\xac\x89\x30\x79\x96\xe3\x9a\x50\xd7\x17\x1e\xd8\x84\x4a\x9e\xe5\xc8\x26\x54\xf5\x79\x87\x36\x2f\xbd\x80\xe6\xac\x5a\xbe\x90\x9f\x9f\x68\x8b\x86\x2c\x81\x28\x43\xb8\xfd\xd9\xd5\x7c\xd9\xfe\xf7\xa6\xb5\xbb\x64\xc1\x66\xa3\x32\xc3\x56\x1d\xa2\x35\x8c\xcd\x2c\xd3\xac\x0a\x8b\x3c\xce\xac\xd1\xe0\x4d\xe7\xae\x45\x1e\x17\x06\xad\xdd\xd9\xb1\x80\x3d\x33\xaa\x10\x14\xf9\x80\x2c\xcd\x49\x16\x79\xac\x2d\xe8\x71\x39\x5f\xa2\x7e\x46\xd1\xf8\x71\xe6\xbe\x01\x02\xe5\x48\x17\x01\xf7\xe8\x3d\x94\x4c\x00\xd3\x7c\x11\xa6\xcd\x80\x93\xc6\x38\xe3\xd4\x0b\x6e\x1b\x59\xd0\x32\xc4\x5f\x18\x7e\x11\x6b\xb2\x64\x48\x80\xc9\x86\x6d\x96\xf9\xbd\xec\x41\x97\xa6\xe4\xbb\xf3\x8e\xae\xed\x40\x2a\xa2\x50\x86\x4d\x7f\xb4\x2c\xa2\x97\x04\x3a\x31\x86\x2c\x5a\x2c\xd2\xc2\xd3\xac\x24\x69\x53\x99\xdd\xa9\xe6\x32\xa4\x39\x57\x30\xb6\x3d\xc9\x81\xfa\x23\x8f\xda\x54\x79\x0f\xa0\xab\x62\xca\x99\x5c\xb5\x0f\x04\xcb\x89\x32\xd0\xf5\xdd\xd8\x23\x42\x97\x54\x7e\xb2\x84\x34\xa1\x1d\x2a\x6d\x3e\x16\x64\x80\x12\x92\x5a\x34\x4e\xe0\xc1\xfb\x8d\xc0\x2e\xce\x52\xfd\xf3\x46\x2d\x7f\x4b\x73\x68\xd6\x17\x5f\x31\x7c\xed\x9c\x66\x2d\x32\x9e\x58\xf6\x37\x49\xaf\x4b\x4d\xf9\x5e\x2c\x59\x81\x49\x01\x36\xfc\x99\xa6\x09\xf0\x0b\x9f\xe0\xfd\xca\x82\x20\xd5\xb4\x6d\x95\xb7\x78\xbc\x9b\xea\xd8\xfe\x9c\x37\x39\xde\xbd\x79\x73\xda\x6d\x97\x4f\xcf\xce\x7b\x77\xc0\xdd\x8c\x39\x1b\xce\x7c\xa3\x07\xdf\xbe\xbb\xba\xbe\xba\x7b\x91\x0c\x3d\x65\x8b\x91\x99\xb2\x9a\x4d\x56\x04\x67\x44\x44\xf8\x36\x36\xf4\xf4\x45\xd8\xa3\xfb\xf2\x65\x56\x96\xcb\x9b\xed\x7c\x9f\xb5\x73\xe6\x0b\x93\xe8\xab\x09\x1d\x54\xc2\x32\x2f\xa0\x25\x4f\xc2\x98\xc9\xa4\x16\x02\xf1\x74\xb7\x98\x10\x43\xe0\x80\x08\x27\x38\xf8\xe4\xee\xda\xc4\xd4\x4b\xd3\x51\x94\xba\x83\xb7\xde\xad\x94\x17\x4f\x78\xfd\xfd\x32\xd9\xec\xaf\x3f\x17\x81\xff\xeb\xcf\x65\xdb\xf7\xe2\xf1\xdc\x86\x23\x0d\x9b\x7d\x45\x7e\x07\x67\x8c\x3b\xdf\xb8\x73\x8e\x8d\xf8\xa6\x6d\xf3\x2a\x24\x56\xf5\xcc\x5f\x87\x50\xa1\x15\xdb\x35\x96\x2f\x0a\xc3\xcb\x76\x3e\xab\xac\x58\xd7\xf6\x7c\x45\x38\xbe\x83\xf2\x3c\x42\xe4\x7b\xa8\xcd\x23\x4c\xfe\x5f\x98\xff\xad\x0a\xf3\x98\x60\xdf\xba\x2a\x5f\x67\xc7\x77\x61\xc6\x36\x68\x3c\xef\x52\xfb\xbc\xda\xf3\x6b\xe2\xf1\x8c\x15\x66\xf4\x2d\x7d\xb6\xc2\x8c\x52\xc1\xc6\x57\x1a\x7f\x8f\xda\x31\x44\xf4\x89\x85\xe3\xd2\x4a\x54\x12\x16\x7f\x13\xe2\xc2\x49\x6a\xe2\xbf\x9a\xd5\xe3\x56\xeb\x6c\xaa\x34\xa2\x9c\x9d\x13\x5b\x71\xf1\x60\x32\x9c\x84\xd2\x5a\xcb\xa2\x7c\x27\xf5\x66\x56\x34\xfe\xb4\x78\xf1\x11\xdd\x32\x98\x23\x22\x24\x16\xf3\x95\xd3\xce\x89\xe4\x3e\x06\xbf\x54\x61\xa5\xd3\x3d\xe9\x71\x1f\xa1\x47\x15\x26\xdf\x6c\x4d\xb5\x16\x74\xcd\xc8\x1f\x9c\xaa\xe2\x4e\xa4\xbe\xed\x29\xad\x6f\x27\xfc\x2c\x36\x33\x3d\x71\x1c\x2d\x18\x3a\x53\xc4\xa9\xca\xdc\xdc\x0c\x54\x00\x7b\xf8\x25\xc5\x57\x70\x9e\xe1\xa4\x78\x73\xb3\x73\xda\xd9\x31\x60\x47\xbb\xbf\x73\x67\x40\x72\x4d\x55\x74\xdd\xe9\xee\x18\x41\x23\x7b\x77\xb7\xdc\xf8\x5c\x40\xda\x4e\x60\x3c\x74\xdf\x5f\x5c\x80\xf5\xa0\x10\x7a\xed\x6e\xf6\x83\x8d\x1c\xcc\x38\xc9\xc6\x9e\xd7\xd7\x72\xfd\x5e\xbb\x9b\x65\x63\xd1\x16\x54\x51\x9b\x78\xf1\x27\xed\xf1\x97\xcc\x5b\xd2\xe4\x7f\x01\x00\x00\xff\xff\x3c\x67\x0d\x81\x8c\x33\x00\x00")

func dataPatches193P55101_strict_hostname_checkingPatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches193P55101_strict_hostname_checkingPatch,
		"data/patches/1.9.3-p551/01_strict_hostname_checking.patch",
	)
}

func dataPatches193P55101_strict_hostname_checkingPatch() (*asset, error) {
	bytes, err := dataPatches193P55101_strict_hostname_checkingPatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.9.3-p551/01_strict_hostname_checking.patch", size: 13196, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P001_readlinePatch,
		"data/patches/2.0.0-p0/01_readline.patch",
	)
}

func dataPatches200P001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p0/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P19501_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P19501_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P19501_readlinePatch,
		"data/patches/2.0.0-p195/01_readline.patch",
	)
}

func dataPatches200P19501_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P19501_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p195/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P24701_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P24701_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P24701_readlinePatch,
		"data/patches/2.0.0-p247/01_readline.patch",
	)
}

func dataPatches200P24701_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P24701_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p247/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P35301_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P35301_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P35301_readlinePatch,
		"data/patches/2.0.0-p353/01_readline.patch",
	)
}

func dataPatches200P35301_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P35301_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p353/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P45101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P45101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P45101_readlinePatch,
		"data/patches/2.0.0-p451/01_readline.patch",
	)
}

func dataPatches200P45101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P45101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p451/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\x23\x83\x4a\x65\x3c\x56\x34\x04\x88\xb2\x7d\xb5\x4c\x7c\x43\x2d\x52\x27\xb2\xdd\xae\xfc\xf7\x93\x43\x13\x16\xd4\x56\xb0\x69\xd2\xfc\x21\xb1\x6e\xce\x3d\xf7\xe4\xde\x63\x5f\x48\x8e\xcb\x4f\x80\x4b\xf3\x51\x21\xe3\xb9\x90\xd8\x6c\xa2\x94\x0c\xff\x7c\x91\x30\x0c\x37\xf1\xff\xe7\x2a\x5c\x08\x2d\x0a\x09\xf1\x6e\xbf\x1f\x7b\xc4\xf7\xfd\x37\x82\x77\x3d\x32\x1a\x41\xd8\x4b\xf6\xe3\x60\x1f\xfc\xd5\x7b\x34\x22\x40\xc0\x2e\x95\x53\x66\x0c\xce\x4a\x83\x9c\xa6\xc5\xac\xcc\xd1\x88\x42\xd2\x6c\x2e\x53\xbb\x81\x21\xd4\xdc\xdb\x81\x87\x04\x76\x44\x06\x1c\x33\x21\x91\xbb\xe3\xe3\xef\x67\xf4\xf6\x92\xde\xdc\x9e\xd1\x8b\xab\x9b\x6f\x77\x74\x7c\x7d\xfd\xd5\x23\xe1\xaa\x68\xa9\x90\x0a\x59\xce\x0d\x9d\x16\xc5\x23\x0c\xc1\x3d\xaf\x2b\x7e\xf0\x9a\x8a\x6d\xd4\x21\xf1\x37\x66\xab\xbc\xda\x56\x72\xa8\xd9\xc6\x01\x3b\x28\xb9\xc8\x2a\xb9\x1c\x33\xa8\x95\x9e\x1c\xdf\x9d\x8c\xe9\xe4\xe2\xcb\xd5\xf1\xe5\xa4\x69\x4e\xca\x4c\x3a\xa5\x5a\x3c\x48\x96\x6b\x18\x42\xf7\x90\xac\x33\x03\x2e\x4d\x5a\xc8\x2c\x52\xf7\x7f\xc7\x0c\x2f\xfc\xed\xf9\x0e\x92\x35\x66\xd8\x04\x8e\xbb\xb5\x19\x82\x3d\x6b\x85\xa0\xd7\xad\x9c\x00\xa0\xd0\xcc\x95\x04\x3d\x2f\x51\xb9\xb6\x85\x01\x4c\x91\x71\x54\xda\x23\x80\x92\x13\x20\xbe\xed\x55\x63\xb3\x29\x5b\x20\x35\x4f\x25\xba\xf6\xe1\xd9\xc1\xb4\x38\x6c\xf4\x17\x0e\xdf\x72\xf8\x04\xb8\x50\xd4\x4a\x13\x0f\x6e\x27\x9d\x2b\x8d\xba\xe3\xb5\xa3\x72\x7d\xd8\xa0\x9a\xa5\xac\xec\x3c\xff\x40\x12\x07\x31\xf8\xc9\x41\x70\x50\xe9\x6f\xab\xb2\xf2\x5d\x47\xe5\x54\x21\x17\xba\xcc\xd9\x93\xe3\x6d\xc4\x08\xa9\x51\x19\x6a\x70\x69\xb6\xa0\x38\xe6\x68\xb0\x46\xf9\x73\x99\xa3\xd6\xeb\x9a\xe1\xb4\x6d\xe8\x54\x8d\xf9\xff\xf4\xec\x7c\x02\x47\x47\xe0\x84\xa7\xed\xef\xc3\xda\xf3\x4e\xd3\xa1\x54\x21\x33\x48\x67\xec\x11\x33\x91\x5b\xc6\x55\x15\xc7\xfb\xa7\x8c\x17\xf7\xdf\x63\xbc\xc1\x6a\x6e\x95\xf1\x92\x24\x48\xb6\xcd\xed\x77\x66\x02\xef\x9c\xc9\x0e\xbc\xba\x30\x84\x06\xb6\x60\x22\x67\xf7\x39\x82\x16\x32\xc5\x86\x2b\x8c\xa3\x3e\xb8\xfd\x6e\xb7\xe7\x45\xcf\xb9\xcd\x55\x25\x6c\xc5\x59\xb1\x40\x0e\xcc\xbc\x24\xec\x45\x03\x9b\xd0\x8b\xeb\x84\x71\xf1\x03\x17\xa8\x02\x40\x2e\x8c\x85\x80\x7b\x85\xe6\xf3\xe4\x14\xf6\xa2\x5e\x34\x08\xa0\x02\x03\x2f\x50\xcb\x8e\x01\x2b\xfe\x95\xc0\xc8\x1e\xd3\x37\x39\xc9\x9e\xd7\x9f\x01\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21001_readlinePatch,
		"data/patches/2.1.0/01_readline.patch",
	)
}

func dataPatches21001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.0/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\x23\x83\x4a\x65\x3c\x56\x34\x04\x88\xb2\x7d\xb5\x4c\x7c\x43\x2d\x52\x27\xb2\xdd\xae\xfc\xf7\x93\x43\x13\x16\xd4\x56\xb0\x69\xd2\xfc\x21\xb1\x6e\xce\x3d\xf7\xe4\xde\x63\x5f\x48\x8e\xcb\x4f\x80\x4b\xf3\x51\x21\xe3\xb9\x90\xd8\x6c\xa2\x94\x0c\xff\x7c\x91\x30\x0c\x37\xf1\xff\xe7\x2a\x5c\x08\x2d\x0a\x09\xf1\x6e\xbf\x1f\x7b\xc4\xf7\xfd\x37\x82\x77\x3d\x32\x1a\x41\xd8\x4b\xf6\xe3\x60\x1f\xfc\xd5\x7b\x34\x22\x40\xc0\x2e\x95\x53\x66\x0c\xce\x4a\x83\x9c\xa6\xc5\xac\xcc\xd1\x88\x42\xd2\x6c\x2e\x53\xbb\x81\x21\xd4\xdc\xdb\x81\x87\x04\x76\x44\x06\x1c\x33\x21\x91\xbb\xe3\xe3\xef\x67\xf4\xf6\x92\xde\xdc\x9e\xd1\x8b\xab\x9b\x6f\x77\x74\x7c\x7d\xfd\xd5\x23\xe1\xaa\x68\xa9\x90\x0a\x59\xce\x0d\x9d\x16\xc5\x23\x0c\xc1\x3d\xaf\x2b\x7e\xf0\x9a\x8a\x6d\xd4\x21\xf1\x37\x66\xab\xbc\xda\x56\x72\xa8\xd9\xc6\x01\x3b\x28\xb9\xc8\x2a\xb9\x1c\x33\xa8\x95\x9e\x1c\xdf\x9d\x8c\xe9\xe4\xe2\xcb\xd5\xf1\xe5\xa4\x69\x4e\xca\x4c\x3a\xa5\x5a\x3c\x48\x96\x6b\x18\x42\xf7\x90\xac\x33\x03\x2e\x4d\x5a\xc8\x2c\x52\xf7\x7f\xc7\x0c\x2f\xfc\xed\xf9\x0e\x92\x35\x66\xd8\x04\x8e\xbb\xb5\x19\x82\x3d\x6b\x85\xa0\xd7\xad\x9c\x00\xa0\xd0\xcc\x95\x04\x3d\x2f\x51\xb9\xb6\x85\x01\x4c\x91\x71\x54\xda\x23\x80\x92\x13\x20\xbe\xed\x55\x63\xb3\x29\x5b\x20\x35\x4f\x25\xba\xf6\xe1\xd9\xc1\xb4\x38\x6c\xf4\x17\x0e\xdf\x72\xf8\x04\xb8\x50\xd4\x4a\x13\x0f\x6e\x27\x9d\x2b\x8d\xba\xe3\xb5\xa3\x72\x7d\xd8\xa0\x9a\xa5\xac\xec\x3c\xff\x40\x12\x07\x31\xf8\xc9\x41\x70\x50\xe9\x6f\xab\xb2\xf2\x5d\x47\xe5\x54\x21\x17\xba\xcc\xd9\x93\xe3\x6d\xc4\x08\xa9\x51\x19\x6a\x70\x69\xb6\xa0\x38\xe6\x68\xb0\x46\xf9\x73\x99\xa3\xd6\xeb\x9a\xe1\xb4\x6d\xe8\x54\x8d\xf9\xff\xf4\xec\x7c\x02\x47\x47\xe0\x84\xa7\xed\xef\xc3\xda\xf3\x4e\xd3\xa1\x54\x21\x33\x48\x67\xec\x11\x33\x91\x5b\xc6\x55\x15\xc7\xfb\xa7\x8c\x17\xf7\xdf\x63\xbc\xc1\x6a\x6e\x95\xf1\x92\x24\x48\xb6\xcd\xed\x77\x66\x02\xef\x9c\xc9\x0e\xbc\xba\x30\x84\x06\xb6\x60\x22\x67\xf7\x39\x82\x16\x32\xc5\x86\x2b\x8c\xa3\x3e\xb8\xfd\x6e\xb7\xe7\x45\xcf\xb9\xcd\x55\x25\x6c\xc5\x59\xb1\x40\x0e\xcc\xbc\x24\xec\x45\x03\x9b\xd0\x8b\xeb\x84\x71\xf1\x03\x17\xa8\x02\x40\x2e\x8c\x85\x80\x7b\x85\xe6\xf3\xe4\x14\xf6\xa2\x5e\x34\x08\xa0\x02\x03\x2f\x50\xcb\x8e\x01\x2b\xfe\x95\xc0\xc8\x1e\xd3\x37\x39\xc9\x9e\xd7\x9f\x01\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21101_readlinePatch,
		"data/patches/2.1.1/01_readline.patch",
	)
}

func dataPatches21101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.1/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile-centos.template": dataDockerfileCentosTemplate,
	"data/Dockerfile-xenial.template": dataDockerfileXenialTemplate,
	"data/Dockerfile.template": dataDockerfileTemplate,
	"data/patches/1.0.0/01_for_tests": dataPatches10001_for_tests,
	"data/patches/1.0.0/02_for_tests": dataPatches10002_for_tests,
	"data/patches/1.9.3-p551/01_strict_hostname_checking.patch": dataPatches193P55101_strict_hostname_checkingPatch,
	"data/patches/2.0.0-p0/01_readline.patch": dataPatches200P001_readlinePatch,
	"data/patches/2.0.0-p195/01_readline.patch": dataPatches200P19501_readlinePatch,
	"data/patches/2.0.0-p247/01_readline.patch": dataPatches200P24701_readlinePatch,
	"data/patches/2.0.0-p353/01_readline.patch": dataPatches200P35301_readlinePatch,
	"data/patches/2.0.0-p451/01_readline.patch": dataPatches200P45101_readlinePatch,
	"data/patches/2.1.0/01_readline.patch": dataPatches21001_readlinePatch,
	"data/patches/2.1.1/01_readline.patch": dataPatches21101_readlinePatch,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Dockerfile-centos.template": &bintree{dataDockerfileCentosTemplate, map[string]*bintree{}},
		"Dockerfile-xenial.template": &bintree{dataDockerfileXenialTemplate, map[string]*bintree{}},
		"Dockerfile.template": &bintree{dataDockerfileTemplate, map[string]*bintree{}},
		"patches": &bintree{nil, map[string]*bintree{
			"1.0.0": &bintree{nil, map[string]*bintree{
				"01_for_tests": &bintree{dataPatches10001_for_tests, map[string]*bintree{}},
				"02_for_tests": &bintree{dataPatches10002_for_tests, map[string]*bintree{}},
			}},
			"1.9.3-p551": &bintree{nil, map[string]*bintree{
				"01_strict_hostname_checking.patch": &bintree{dataPatches193P55101_strict_hostname_checkingPatch, map[string]*bintree{}},
			}},
			"2.0.0-p0": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P001_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p195": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P19501_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p247": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P24701_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p353": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P35301_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p451": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P45101_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.0": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21001_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.1": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21101_readlinePatch, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

